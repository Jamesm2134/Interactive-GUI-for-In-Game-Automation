import tkinter as tk
from tkinter import *
from tkinter.ttk import *
from tkinter import ttk
import customtkinter
from tkinter import Button
import pyautogui
import time
import keyboard
import threading


customtkinter.set_appearance_mode("dark")
customtkinter.set_default_color_theme("green")
program_canceled = False
start_clicking = False
auto_clicker_code = False
auto_clicker_walk_code = False
auto_attack_code = False
program_stopped = False
background_running = False


def on_select(event):
    
    selected_item = cmb.get(cmb.curselection())
    num.set(selected_item)
    cmb.place_forget()


def countDown():
    for i in range(10, -1, -1):
        yield i


def countUp():
    i = 1
    while True:
        yield i
        i += 1

def start_countdown():
    global program_stopped
    global start_clicking
    global auto_clicker_code, auto_clicker_walk_code, auto_attack_code, background_running
    countDown()
    countdown_generator = countDown() 
    for value in countdown_generator:
        count_down_label.config(text=f"Starting in {value} seconds")
        if program_stopped is True:
            return
        if value == 0:
            timer_done = True
            start_clicking = True
        root.update()  
        root.after(500)  
        
    
    if timer_done:
        clicking_begin()
        


def start_countUp():
    global auto_clicker_code, auto_clicker_walk_code, auto_attack_code, background_running
    seconds_clicking.pack(padx=20, pady=20)
    back_to_main.pack()
    countUp_generator = countUp()  # Initialize countUp_generator here
    for value in countUp_generator:
        seconds_clicking.config(text=f"{value} Seconds clicking")
        root.update()  # Update the GUI to reflect the new label text
        root.after(1000)  # Delay for 1 second (1000 milliseconds)
    
  
root = customtkinter.CTk()
root.iconbitmap('C:\\Users\\jamck\Downloads\\finalmclogo.ico')
background_image = PhotoImage(file='C:\\Users\\jamck\Desktop\\ezgif-2-2298842797.gif')
background_label = Label(root, image=background_image)
background_label.place(x=-10, y=-10)
root.geometry("500x500")
root.title("SimpleClicker")
root.resizable(False, False)
frame = customtkinter.CTkFrame(master=root)
frame.pack(pady=20, padx=60, fill="both", expand=True)
label = customtkinter.CTkLabel(master=frame, text="Simple  Clicker", font=("Minecraft Ten",45,"bold"))
label.pack()
program_created = customtkinter.CTkLabel(master=frame, text="A (simple) program created for Minecraft", font=("Botsmatic Outline", 10))
program_created.pack()


def combo_box_selection_changed(event):
    global auto_clicker_code, auto_clicker_walk_code, auto_attack_code, background_running
    selected_item = cmb.get()
    if selected_item == "Auto Clicker":
        auto_clicker_code = True
        print("test")
    elif selected_item == "Auto Clicker Moving":
        auto_clicker_walk_code = True
    elif selected_item == "AFK Attacking":
        auto_attack_code = True

    frame.focus()
    start_button.pack(padx=20, pady=20)


def start_background():
    global background_running
    if not background_running:
        background_running = True
        background_thread = threading.Thread(target=afk_commands_background)
        background_thread.daemon = True
        background_thread.start()
        time.sleep(0.01)

def stop_background():
    global background_running
    background_running = False

num = tk.StringVar()
cmb = ttk.Combobox(frame, width=18, textvariable=num, state="readonly", exportselection=False, )
cmb['values'] = ("Auto Clicker", "Auto Clicker Moving", "AFK Attacking")
cmb.pack()
cmb.bind("<<ComboboxSelected>>", combo_box_selection_changed)


def abort():
    global auto_clicker_code, auto_clicker_walk_code, auto_attack_code, program_stopped
    program_stopped = True
    stop_background()
    print("aborted")
    start_button.configure(state='enabled')
    cmb.config(state='enabled')
    abort_button.pack_forget()
    count_down_label.pack_forget()


def back_to_main_site():
    global auto_clicker_code, auto_clicker_walk_code, auto_attack_code
    seconds_clicking.pack_forget()
    stop_clicking.pack_forget()
    back_to_main.pack_forget()
    abort_button.pack_forget()
    cmb.pack()
    cmb.config(state='enabled')
    start_button.configure(state='enabled')
    

afk_auto_click = False

def start_button_clicked():
    global auto_clicker_code, auto_clicker_walk_code, auto_attack_code
    global program_stopped
    global afk_auto_click
    program_stopped = False
    print("started")
    start_button.configure(state='disabled')
    cmb.config(state='disabled')
    abort_button.pack(pady=5)
    count_down_label.pack()
    start_countdown()
    afk_auto_click = True


def clicking_begin():
    global auto_clicker_code, auto_clicker_walk_code, auto_attack_code
    cmb.pack_forget()
    abort_button.pack_forget()
    count_down_label.pack_forget()
    start_button.pack_forget()
    stop_clicking.pack()
    start_background()
    start_countUp()
    

    


def exit_program():
   root.destroy()
   root.quit()


count_down_label = tk.Label(frame, text="Countdown: ")
start_button = customtkinter.CTkButton(master=frame, text="Start Auto Clicker", command=start_button_clicked)
start_button.pack()
start_button.pack_forget()
abort_button = customtkinter.CTkButton(master=frame, text=" Click to ABORT ", command=abort)
abort_button.pack()
abort_button.pack_forget()   
seconds_clicking = tk.Label(frame, text=" seconds clicking  " )
Button(root, text= "                   Exit                   ", font=("Calibri",14,"bold"), command=exit_program).pack(pady=20)
back_to_main = customtkinter.CTkButton(master=frame, text="  STOP  ", command=back_to_main_site)
back_to_main.pack()
back_to_main.pack_forget()
stop_clicking = tk.Label(frame, text="To stop press ( x )")



def afk_commands_background():
    global auto_clicker_code, program_stopped
    print("hello wolring")
    while True:  # Keep the loop running until explicitly stopped
        if auto_clicker_code and not program_stopped:
            while True:
                pyautogui.keyDown('w')
                pyautogui.keyDown('shiftleft')
                pyautogui.mouseDown(button='left')

                if keyboard.is_pressed('x'):
                    print("program over")
                    pyautogui.keyUp('w')
                    pyautogui.keyUp('shiftleft')
                    pyautogui.mouseUp(button='left')
                    abort()
                    back_to_main_site()              
                    break

root.mainloop()
